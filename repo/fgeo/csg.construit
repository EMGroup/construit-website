
#! Intersect #library
function CSGIntersect {
	para a, b.
	return ${{ Math.min(a,b) }}$.
}.

#! Union #library
function CSGUnion{
	para a, b.
	return ${{ Math.max(a,b) }}$.
}.

#! Subtract #library
function CSGSubtract {
	para a, b.
	return ${{ Math.min(a, -b) }}$.
}.

#! Sphere #library
function CSGSphere {
	para x, center, R.
	local x0, x1, x2.
	x0 = x[1] - center[1].
	x1 = x[2] - center[2].
	x2 = x[3] - center[3].
	return (R*R) - (x0*x0) - (x1*x1) - (x2*x2).
}.

#! Ellipsoid #library
function CSGEllipsoid {
	para x, center, a, b, c.
	local x0, x1, x2.
	x0 = (x[1] - center[1]) / a.
	x1 = (x[2] - center[2]) / b.
	x2 = (x[3] - center[3]) / c.
	return 1 - (x0*x0) - (x1*x1) - (x2*x2).
}.

#! Cone Y #library
function CSGConeY {
	para x, center, R.
	local x0, x1, x2, r2.
	x0 = x[1] - center[1].
	x1 = x[2] - center[2].
	x2 = x[3] - center[3].
	r2 = R*R.
	return (x1*x1) - (x0*x0)/r2 - (x2*x2)/r2.
}.

#! Cone X #library
function CSGConeX {
	para x, center, R.
	local x0, x1, x2, r2.
	x0 = x[1] - center[1].
	x1 = x[2] - center[2].
	x2 = x[3] - center[3].
	r2 = R*R.
	return (x0*x0) - (x1*x1)/r2 - (x2*x2)/r2.
}.

#! Cylinder X #library
function CSGCylX {
	para x, center, R.
	local x1, x2.
	x1 = x[2] - center[2].
	x2 = x[3] - center[3].
	return (R*R) - (x1*x1) - (x2*x2).
}.

#! Cylinder Y #library
function CSGCylY {
	para x, center, R.
	local x0, x2.
	x0 = x[1] - center[1].
	x2 = x[3] - center[3].
	return (R*R) - (x0*x0) - (x2*x2).
}.

#! Cylinder Z #library
function CSGCylZ {
	para x, center, R.
	local x0, x1.
	x0 = x[1] - center[1].
	x1 = x[2] - center[2].
	return (R*R) - (x0*x0) - (x1*x1).
}.

#! Elliptical Cylinder X #library
function CSGEllCylX {
	para x, center, a, b.
	local y0,z0.
	y0 = (x[2] - center[2]) / a.
	z0 = (x[3] - center[3]) / b.
	return 1 - (y0*y0) - (z0*z0).
}.

#! Elliptical Cylinder Y #library
function CSGEllCylY {
	para x, center, a, b.
	local x0,z0.
	x0 = (x[1] - center[1]) / a.
	z0 = (x[3] - center[3]) / b.
	return 1 - (x0*x0) - (z0*z0).
}.

#! Elliptical Cylinder Z #library
function CSGEllCylZ {
	para x, center, a, b.
	local x0,y0.
	x0 = (x[1] - center[1]) / a.
	y0 = (x[2] - center[2]) / b.
	return 1 - (x0*x0) - (y0*y0).
}.

#! Torus X #library
function CSGTorusX {
	para x, center, R, r0.
	local x0, x1, x2.
	x0 = x[1] - center[1].
	x1 = x[2] - center[2].
	x2 = x[3] - center[3].
	return (r0*r0) - (x0*x0 - (x1*x1) - (x2*x2) - (R*R) + 2*R*sqrt(((x1*x1)+(x2*x2)))).
}.

#! Torus Y #library
function CSGTorusY {
	para x, center, R, r0.
	local x0, x1, x2.
	x0 = x[1] - center[1].
	x1 = x[2] - center[2].
	x2 = x[3] - center[3].
	return (r0*r0) - (x0*x0) - (x1*x1) - (x2*x2) - (R*R) + 2*R*sqrt(((x0*x0)+(x2*x2))).
}.

#! Torus Z #library
function CSGTorusZ {
	para x, center, R, r0.
	local x0, x1, x2.
	x0 = x[1] - center[1].
	x1 = x[2] - center[2].
	x2 = x[3] - center[3].
	return (r0*r0) - (x0*x0) - (x1*x1) - (x2*x2) - (R*R) + 2*R*sqrt(((x0*x0)+(x1*x1))).
}.

#! Block #library
function CSGBlock {
	para x, vertex, dx, dy, dz.
	local x0, y0, z0, i0.
	x0 = -(x[1] - vertex[1]) * (x[1] - (vertex[1] + dx)).
	y0 = -(x[2] - vertex[2]) * (x[2] - (vertex[2] + dy)).
	z0 = -(x[3] - vertex[3]) * (x[3] - (vertex[3] + dz)).
	i0 = x0 + y0 - sqrt(x0*x0 + y0*y0).
	return i0 + z0 - sqrt(i0*i0+z0*z0).
}.

function CSGBlobby {
	para x, x0, y0, z0, a, b, T.
	local xx0, xx1, xx2, r, lsum, u.
	lsum = 0.

	for (u=1; u<=x0#; u++) {
		xx0 = x[1] - x0[u].
		xx1 = x[2] - y0[u].
		xx2 = x[3] - z0[u].
		r = (xx0*xx0) + (xx1*xx1) + (xx2*xx2).
		lsum += b[u] * exp(-a[u] * r).
	}.

	return lsum - T.
}.

function CSGMetaBall {
	para x, x0, y0, z0, b, d, T.
	local xx0, xx1, xx2, r, lsum, u.
	lsum = 0.

	for (u=1; u<=x0#; u++) {
		xx0 = x[1] - x0[u].
		xx1 = x[2] - y0[u].
		xx2 = x[3] - z0[u].
		r = (xx0*xx0) + (xx1*xx1) + (xx2*xx2).

		if (r <= d[u]) {
			if (r <= (d[u] / 3)) lsum += b[u] * (1 - 3*r / d[u]*d[u]),
			else lsum += 1.5*b[u] * (1 - r / d[u]) * (1 - r / d[u]).
		}.
	}.

	return lsum - T.
}.

function CSGSoft {
	para x, x0, y0, z0, d, T.
	local xx0, xx1, xx2, r, lsum, u, d2.
	lsum = 0.

	for (u=1; u<=x0#; u++) {
		xx0 = x[1] - x0[u].
		xx1 = x[2] - y0[u].
		xx2 = x[3] - z0[u].
		r = (xx0*xx0) + (xx1*xx1) + (xx2*xx2).
		d2 = d[u]*d[u].
		lsum += 1 - (22*r) / (9*d2) + (17*r*r) / (9*d2*d2) - (4*r*r*r) / (9*d2*d2*d2).
	}.

	return lsum - T.
}.

function CSGScale3D {
	para x, sx, sy, sz.
	return [x[1]/sx,x[2]/sy,x[3]/sz].
}.

function CSGShift3D {
	para x, dx, dy, dz.
	return [x[1] - dx, x[2] - dy, x[3] - dz].
}.

function CSGBlendUni {
	para f1,f2,a0,a1,a2.
	local uni,f1a1,f2a2,disp.
	uni = f1 + f2 + sqrt(f1*f1+f2*f2).
	f1a1 = f1 / a1.
	f2a2 = f2 / a2.
	disp = a0 / (1 + f1a1*f1a1 + f2a2*f2a2).
	return uni + disp.
}.


function CSGBlendInt {
	para f1,f2,a0,a1,a2.
	local uni, f1a1, f2a2, disp.
	uni = f1 + f2 - sqrt(f1*f1+f2*f2).
	f1a1 = f1 / a1.
	f2a2 = f2 / a2.
	disp = a0 / (1 + f1a1*f1a1 + f2a2*f2a2).
	return uni+disp.
}.

